initSidebarItems({"enum":[["PositionInTriangulation","Yields information about a point's position in triangulation."],["RTreeNodeIterator",""]],"mod":[["primitives","Contains some useful primitives that can be inserted into r-trees."],["testutils",""]],"struct":[["AdaptiveIntKernel","Delaunay kernel for integral coordinates with a larger value range."],["AllEdgesIterator","An iterator over all edges contained in a subdivision."],["AllVerticesIterator","An iterator over all vertices in a subdivision."],["BoundingRect","An axis aligned minimal bounding rectangle."],["DelaunayTriangle","Represents a triangle in a delaunay triangulation."],["DelaunayTriangleIterator","Iterator over all triangles in a delaunay triangulation."],["DelaunayTriangulation","A 2D Delaunay triangulation."],["FloatKernel","Offers a fast, precise kernel working with `f64` coordinates."],["RTree","A rust implementation of n dimensional r*-trees"],["RTreeIterator","Iterates over all entries in an r-tree. Returned by `RTree::iter()`"],["TrivialKernel","Offers fast, possibly approximative and possibly inaccurate geometric calculations."],["VertexHandle","A reference to a vertex in a triangulation. Note that this handle dereferences to the data it represents."]],"trait":[["DelaunayKernel","Determines how a delaunay triangulation performs its basic geometry computation."],["HasPosition","An object with a well defined location. Since this trait also implements `SpatialObject`, `HasPosition` can serve as a quick and easy implementation of your own pointlike objects that can be inserted into r-trees:"],["HasPosition2D","Like `HasPosition`, but will only work for two dimensional vectors."],["SpadeFloat","Trait for `SpadeNum`s that are also a floating point number. Used by all operations that require precise division."],["SpadeNum","Scalar that can be used for spade's datastructures will need to implement this trait. Can be an integer or floating point type. Note that `copy` is not necessary."],["SpatialObject","Describes objects that can be located by r-trees."],["ThreeDimensional","A three dimensional Vector. Some algorithms will only work with three dimensional vectors, this trait makes sure that only such vectors can be used."],["TwoDimensional","A two dimensional Vector. Some datastructures will only work if two dimensional vectors are given, this trait makes sure that only such vectors can be passed."],["VectorN","Abstraction over vectors in different dimensions."]],"type":[["FixedVertexHandle","A `'static` handle to a vertex. This handle can be made persistent and will remain valid until the vertex it refers to is removed."]]});